#!/bin/bash

VENV_NAME="bss-macro-env"
VENV_PATH="$HOME/$VENV_NAME"

create_virtual_env() {
    if [ ! -d "$VENV_PATH" ]; then
        printf "\033[1;35mCreating virtual environment at $VENV_PATH\033[0m\n"
        python"${python_ver}" -m venv "$VENV_PATH"
    else
        printf "\033[1;32mVirtual environment already exists at $VENV_PATH\033[0m\n"
    fi
}

activate_virtual_env() {
    printf "\033[1;35mActivating virtual environment\033[0m\n"
    source "$VENV_PATH/bin/activate"
}

install_pip_package() {
    local packages="$1"
    local extra_args="$2"
    
    if [ "$chip" = "arm64" ]; then
        arch -arm64 pip install --trusted-host pypi.org --trusted-host pypi.python.org --trusted-host files.pythonhosted.org --default-timeout=100 $extra_args $packages --constraint <(echo "$constraints")
    else
        #fallback for other architectures
        pip install --trusted-host pypi.org --trusted-host pypi.python.org --trusted-host files.pythonhosted.org --default-timeout=100 $extra_args $packages --constraint <(echo "$constraints")
    fi
}

upgrade_pip_tools() {
    if [ "$chip" = "arm64" ]; then
        arch -arm64 python"${python_ver}" -m pip install --upgrade pip setuptools wheel
    else
        python"${python_ver}" -m pip install --upgrade pip setuptools wheel
    fi
}

#get system information
chip=$(arch)
os_ver=$(sw_vers -productVersion)

#newline scroll
printf "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"

#check mac compatibility

if [ $chip = 'arm64' ]; then
	if echo -e "$os_ver \n12.99.99" | sort -V | tail -n1 | grep -Fq "12.99.99"; then
		printf "\033[31;1mYour mac is not compatible. It has to be Ventura or later. Consider updating it. \033[0m\n"
		exit 1
	fi
else 
	if echo -e "$os_ver \n10.12.0" | sort -V | tail -n1 | grep -Fq "10.12.0"; then
		printf "\033[31;1mYour mac is not compatible. It has to be 10.12 or later. Consider updating it. \033[0m\n"
		exit 1
	fi
fi

printf "\033[32;1mYour mac is compatible \033[0m\n\n\n"

#Check if python ver is installed

python_ver="3.9"
python_link="/www.python.org/ftp/python/3.9.8/python-3.9.8-macos11.pkg"
constraints=$''
if [ $chip = 'i386' ]; then
	if echo -e "$os_ver \n10.15.0" | sort -V | tail -n1 | grep -Fq "10.15.0"; then
		python_ver="3.8"
		python_link="/www.python.org/ftp/python/3.8.0/python-3.8.0-macosx10.9.pkg"
		constraints=$'pyobjc-core<11.0\npyobjc<11.0'
	elif echo -e "$os_ver \n12.0.0" | sort -V | tail -n1 | grep -Fq "12.0.0"; then
		python_ver="3.8"
		python_link="/www.python.org/ftp/python/3.8.0/python-3.8.0-macosx10.9.pkg"
		constraints=$'pyobjc-core<11.0\npyobjc<11.0'
	else 
		python_link="/www.python.org/ftp/python/3.9.5/python-3.9.5-macos11.pkg"
	fi
fi

filename=$(echo "${python_link}" | sed -e 's/\/.*\///g')

if python"${python_ver}" --version; then
	printf "\033[1;32mPython is already installed\033[0m\n"
else
	printf "\033[1;35mPython is not installed, installing python ${python_ver}\nThere should be a popup for the python installer.\n\033[0m"
	curl -O "https:/${python_link}" && open "${filename}"
	# Wait until python installation has finished.
	until $(python"${python_ver}" --version &> /dev/null); do
	  sleep 5;
	done
	#printf "\033[1;35mPress enter to continue when python is installed\033[0m"
	#read
fi

if xcode-select --print-path &> /dev/null; then
	printf "\033[1;32mCommand Line Tools are already installed.\033[0m\n"
else
	printf "\033[1;35mInstall Command Line Tools. There should be a pop-up; click the install button.\033[0m\n"
	xcode-select --install
	# Wait until XCode Command Line Tools installation has finished.
	until xcode-select --print-path &> /dev/null; do
	  sleep 5
	done
fi

#echo "Enter your password (the password used to log into the admin user). Note: the password is not visible"
#sudo xcode-select --switch /Library/Developer/CommandLineTools
printf "\033[1;35mMaking sure pip is installed\033[0m\n\n"
python"${python_ver}" -m ensurepip
python"${python_ver}" -m pip cache purge
upgrade_pip_tools

attempt=1
while [ "$attempt" -le 3 ]; do
	create_virtual_env
	activate_virtual_env
	
	# Validate Python and pip paths inside the venv
	if [ -x "$VENV_PATH/bin/python" ] && [ -x "$VENV_PATH/bin/pip" ]; then
		echo -e "\033[1;32mVirtual environment is valid\033[0m"
		break
	else
		echo -e "\033[1;31mVirtual environment is broken, recreating...\033[0m"
		rm -rf "$VENV_PATH"
		((attempt++))
		sleep 2
		
	fi
done

printf "\033[1;35mInstalling libraries\033[0m\n\n"

if [ $python_ver = '3.9' ]; then
	install_pip_package "opencv-python"
	#python"${python_ver}" -m pip install --default-timeout=100 paddlepaddle==2.3.2
	#python"${python_ver}" -m pip install --no-deps --default-timeout=100 paddleocr==2.6.1.0
	#python"${python_ver}" -m pip install --default-timeout=100 attrdict beautifulsoup4 cython fire fonttools imgaug lanms-neo==1.0.2 lmdb opencv-contrib-python==4.5.5.64 opencv-python==4.5.5.64 openpyxl Polygon3 premailer pyclipper pymupdf==1.23.1 python-docx rapidfuzz scikit-image shapely tqdm visualdl
	#printf "\033[31;1mInstalling lxml, this can take a while \033[0m\n"
	#python"${python_ver}" -m pip install --default-timeout=100 "lxml<4.9.3"
	#pip"${python_ver}" install --default-timeout=100 orjson==3.9.6
	install_pip_package "ocrmac"
	install_pip_package "pyobjc-framework-ColorSync"

elif echo -e "$os_ver \n10.15.0" | sort -V | tail -n1 | grep -Fq "10.15.0"; then
	printf "\033[1;35mInstalling rust\n\n\033[0m"
	curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- -y
	source "$HOME/.cargo/env"

	install_pip_package "paddlepaddle opencv-python==4.4.0.46 opencv-contrib-python==4.4.0.46 numpy==1.19.1 Polygon3"
	install_pip_package "paddleocr==2.6.1.3 scikit-image imgaug visualdl tritonclient" "--no-deps"
	install_pip_package "paddlepaddle==2.5"
	install_pip_package "python-rapidjson==1.10 pywavelets==1.1.1 imageio networkx packaging pillow tifffile scipy attrdict beautifulsoup4 cython"
	install_pip_pacakge "greenlet"
	install_pip_pacakge "fire"
	install_pip_pacakge "fonttools"
	install_pip_pacakge "lanms-neo==1.0.2"
	install_pip_pacakge "lmdb"
	install_pip_pacakge "pyclipper"
	install_pip_pacakge "python-docx"
	install_pip_pacakge "openpyxl"
	install_pip_pacakge "premailer"
	install_pip_pacakge "pyclipper"
	install_pip_pacakge "python-docx"
	install_pip_pacakge "rapidfuzz"
	install_pip_pacakge "shapely"
	install_pip_pacakge "tqdm"
	install_pip_package "matplotlib pymupdf bce-python-sdk flask-babel gradio"
	printf "\033[31;1mInstalling lxml, this can take a while \033[0m\n"
	STATIC_DEPS=true python"${python_ver}" -m pip install lxml 
	install_pip_package "urllib3 lazy_loader"
	install_pip_package "pdf2docx<0.5.7" "--no-deps"
	install_pip_package "pyobjc-framework-ColorSync"
	
else
	install_pip_package "pyobjc-core<11.0"
	install_pip_package "pyobjc-framework-Cocoa<11.0"
	install_pip_package "pyobjc-framework-ColorSync<11.0" "--no-deps"
	install_pip_package "opencv-python==4.6.0.66"
	#python"${python_ver}" -m pip install --trusted-host pypi.org --trusted-host pypi.python.org --trusted-host files.pythonhosted.org paddlepaddle==2.4.2 -i https://pypi.tuna.tsinghua.edu.cn/simple
	#python"${python_ver}" -m pip install --no-deps --trusted-host pypi.org --trusted-host pypi.python.org --trusted-host files.pythonhosted.org paddleocr==2.6.1.3
	#printf "\033[31;1mInstalling lxml, this can take a while \033[0m\n"
	#python"${python_ver}" -m pip install --default-timeout=100 --trusted-host pypi.org --trusted-host pypi.python.org --trusted-host files.pythonhosted.org attrdict beautifulsoup4 cython fire fonttools imgaug lanms-neo==1.0.2 lmdb lxml opencv-contrib-python==4.6.0.66 opencv-python==4.6.0.66 openpyxl Polygon3 premailer pyclipper pymupdf python-docx rapidfuzz scikit-image shapely tqdm visualdl
	#pip"${python_ver}" install --trusted-host pypi.org --trusted-host pypi.python.org --trusted-host files.pythonhosted.org protobuf==3.20.0
	#pip"${python_ver}" install --trusted-host pypi.org --trusted-host pypi.python.org --trusted-host files.pythonhosted.org orjson==3.9.6
	install_pip_package "ocrmac"
fi
install_pip_package "pyautogui"
install_pip_package "mss"
install_pip_package "pillow"
install_pip_package "discord-webhook"
install_pip_package "discord.py"
install_pip_package "matplotlib"
install_pip_package "fuzzywuzzy"
install_pip_package "python-Levenshtein"
install_pip_package "pyscreeze<0.1.29"
install_pip_package "html2image"
install_pip_package "gevent" "--prefer-binary"
install_pip_package "eel"
install_pip_package "ImageHash"
install_pip_package "httpx"
install_pip_package "flask"
install_pip_package "pygetwindow"
install_pip_package "requests" #used to check if this script was ran, should be installed by discord-webhooks
install_pip_package "aiohttp==3.10.5"
install_pip_package "pynput"
install_pip_package "numpy<2"
pip install "numpy<2"

#download packages a second time
#pip install eel
#pip install pynput
#if echo -e "$os_ver \n10.15.0" | sort -V | head -n1 | grep -Fq "10.15.0"; then
	#pip install ocrmac
#fi

#/bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/existancepy/bss-macro-py-easy-install/main/extras/Install_Certificates.txt)"
#/bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/existancepy/bss-macro-py-easy-install/main/extras/html2image_fix.txt)"
printf "\n\n\n\033[32;1mInstallation complete!\nVisit the discord on instructions for settings and permissions \033[0m\n"
read
